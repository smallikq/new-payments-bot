from aiogram.types import Message
from aiogram import Bot
import asyncio

from services.ocr.processor import process_check_image_aiogram
from core.database import add_check, save_check_screenshot, get_balance
from bot.ui.keyboards import create_main_menu
from bot.middleware.auth import is_admin
from utils.logger import logger


async def handle_check_private(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ–∫–æ–≤ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    if not is_admin(message.from_user.id):
        logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    if message.photo:
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        file_type = "—Ñ–æ—Ç–æ"
    elif message.document and message.document.mime_type and message.document.mime_type.startswith('image/'):
        file_id = message.document.file_id
        file_type = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG, WebP.",
            parse_mode="HTML"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.reply(
        "üîÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞...</b>\n\n"
        f"üìÅ –¢–∏–ø: {file_type}\n"
        f"üîç –ó–∞–ø—É—Å–∫ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...",
        parse_mode="HTML"
    )

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OCR
        amount, full_text = await process_check_image_aiogram(bot, file_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        incoming, checks, _ = get_balance()
        current_balance = incoming - checks

        if amount and amount > 0:
            # –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Å—É–º–º—É
            add_check(amount)
            save_check_screenshot(file_id, amount, full_text or "")

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞
            new_incoming, new_checks, _ = get_balance()
            new_balance = new_incoming - new_checks
            balance_change = new_balance - current_balance

            success_text = f"""
‚úÖ <b>–ß–ï–ö –î–û–ë–ê–í–õ–ï–ù</b>

üßæ –°—É–º–º–∞: <code>{amount:.2f} ‚Ç¥</code>
üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance:,.2f} ‚Ç¥</code>
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <code>{balance_change:,.2f} ‚Ç¥</code>

üìà –í—Å–µ–≥–æ —á–µ–∫–æ–≤: <code>{new_checks:.2f} ‚Ç¥</code>
üîç OCR: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
"""

            await processing_msg.edit_text(
                success_text,
                parse_mode="HTML",
                reply_markup=create_main_menu()
            )

            logger.info(f"‚úÖ –ß–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {amount:.2f} ‚Ç¥ (—Ñ–∞–π–ª: {file_id})")

        else:
            # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É
            save_check_screenshot(file_id, 0, full_text or "–û—à–∏–±–∫–∞ OCR")

            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç OCR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_text = (full_text[:500] + "...") if full_text and len(full_text) > 500 else (
                        full_text or "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

            error_text = f"""
‚ö†Ô∏è <b>–°–£–ú–ú–ê –ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–ê</b>

üîç <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<pre>{display_text}</pre>

üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ù–µ—á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ –°—É–º–º–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
‚Ä¢ –ü–æ–º–µ—Ö–∏ –Ω–∞ —Ñ–æ—Ç–æ

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å
"""

            await processing_msg.edit_text(
                error_text,
                parse_mode="HTML",
                reply_markup=create_main_menu()
            )

            logger.warning(f"‚ö†Ô∏è –ß–µ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (—Ñ–∞–π–ª: {file_id})")

    except Exception as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")

        try:
            await processing_msg.edit_text(
                f"""
‚ùå <b>–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò</b>

üîß –î–µ—Ç–∞–ª–∏: <code>{str(e)}</code>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
""",
                parse_mode="HTML",
                reply_markup=create_main_menu()
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n{error_msg}",
                parse_mode="HTML",
                reply_markup=create_main_menu()
            )


async def handle_document_private(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    if not is_admin(message.from_user.id):
        return

    document = message.document

    if not document:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø
    if document.mime_type and document.mime_type.startswith('image/'):
        # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await handle_check_private(message, bot)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if document.file_name:
        image_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp', '.tiff'}
        file_extension = document.file_name.lower().split('.')[-1]

        if f'.{file_extension}' in image_extensions:
            await handle_check_private(message, bot)
            return

    # –ù–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await message.answer(
        "üìÑ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç</b>\n\n"
        f"üìÅ –§–∞–π–ª: <code>{document.file_name or '–±–µ–∑ –∏–º–µ–Ω–∏'}</code>\n"
        f"üìä –†–∞–∑–º–µ—Ä: <code>{document.file_size or 0} –±–∞–π—Ç</code>\n"
        f"üè∑Ô∏è –¢–∏–ø: <code>{document.mime_type or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>\n\n"
        "üí° –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        parse_mode="HTML"
    )


async def handle_voice_private(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
        "–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ üì∑ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
        parse_mode="HTML"
    )


async def handle_video_private(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üé¨ <b>–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
        "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        parse_mode="HTML"
    )


async def handle_sticker_private(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    sticker_emojis = {
        "üëç": "–û—Ç–ª–∏—á–Ω–æ!",
        "üëé": "–ü–æ–Ω—è—Ç–Ω–æ...",
        "‚ù§Ô∏è": "–°–ø–∞—Å–∏–±–æ!",
        "üî•": "–ö—Ä—É—Ç–æ!",
        "üíØ": "–ò–¥–µ–∞–ª—å–Ω–æ!",
        "üòä": "–•–æ—Ä–æ—à–æ!",
        "ü§î": "–ü–æ–Ω—è–ª...",
        "üò¢": "–°–æ—á—É–≤—Å—Ç–≤—É—é...",
        "üòÇ": "–°–º–µ—à–Ω–æ!",
        "üéâ": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!",
    }

    emoji = message.sticker.emoji if message.sticker and message.sticker.emoji else "ü§ñ"
    response = sticker_emojis.get(emoji, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!")

    await message.answer(f"{emoji} {response}")


def setup_media_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ)
    dp.message.register(
        lambda m, bot: handle_check_private(m, bot),
        lambda m: m.chat.type == "private" and is_admin(m.from_user.id) and m.photo
    )

    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    dp.message.register(
        lambda m, bot: handle_document_private(m, bot),
        lambda m: m.chat.type == "private" and is_admin(m.from_user.id) and m.document
    )

    # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.message.register(
        handle_voice_private,
        lambda m: m.chat.type == "private" and is_admin(m.from_user.id) and m.voice
    )

    # –í–∏–¥–µ–æ
    dp.message.register(
        handle_video_private,
        lambda m: m.chat.type == "private" and is_admin(m.from_user.id) and m.video
    )

    # –°—Ç–∏–∫–µ—Ä—ã
    dp.message.register(
        handle_sticker_private,
        lambda m: m.chat.type == "private" and is_admin(m.from_user.id) and m.sticker
    )