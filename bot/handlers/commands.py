from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –Ω–æ–≤—ã—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from bot.ui.keyboards import (
    create_main_menu, create_settings_menu, create_emergency_settings_menu,
    create_reset_confirmation, create_back_to_main, create_time_quick_set,
    create_limits_quick_set, create_balance_limits_quick_set,
    create_alert_rate_quick_set, create_export_menu, create_set_checks_limit_menu,
    create_set_balance_limit_menu
)
from bot.ui.messages import format_balance_message, format_help_message
from bot.middleware.auth import is_admin
from utils.logger import logger


async def handle_start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_admin(message.from_user.id):
        await message.answer(
            "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {message.from_user.id} (@{message.from_user.username})")
        return

    welcome_text = f"""
üöÄ <b>Payments Bot v2.0</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üëã

üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
‚îú üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
‚îú üßæ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤
‚îú üö® –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚îú üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚îú ‚è∞ –ê–≤—Ç–æ—Å–±—Ä–æ—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚îî üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

üí° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

<i>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</i>
"""

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


async def handle_balance_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer(
        format_balance_message(),
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )


async def handle_help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        format_help_message(),
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )


async def handle_stats_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from bot.ui.messages import format_statistics_message
    await message.answer(
        format_statistics_message(),
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )


async def handle_reset_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from bot.ui.keyboards import create_reset_confirmation
    from bot.ui.messages import format_reset_confirmation

    await message.answer(
        format_reset_confirmation(),
        parse_mode="HTML",
        reply_markup=create_reset_confirmation()
    )


async def handle_settings_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from bot.ui.messages import format_settings_info
    from bot.ui.keyboards import create_settings_menu

    await message.answer(
        format_settings_info(),
        parse_mode="HTML",
        reply_markup=create_settings_menu()
    )


async def handle_status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from bot.ui.messages import format_system_status

    await message.answer(
        format_system_status(),
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )


async def handle_emergency_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /emergency - –±—ã—Å—Ç—Ä–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∞–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from services.alerts.emergency import get_emergency_status
    status = get_emergency_status()

    if status['active']:
        from bot.ui.keyboards import create_alert_control_menu
        text = f"""
üö® <b>–¢–†–ï–í–û–ì–ê –ê–ö–¢–ò–í–ù–ê!</b>

üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status['alert_count']}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {status['last_alert'] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        keyboard = create_alert_control_menu()
    else:
        text = "üü¢ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–≤–æ–≥ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è"
        keyboard = create_main_menu()

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


async def handle_export_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export - –±—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from bot.ui.keyboards import create_export_menu

    await message.answer(
        "üì§ <b>–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        parse_mode="HTML",
        reply_markup=create_export_menu()
    )


def setup_command_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(handle_start_command, Command(commands=["start"]))
    dp.message.register(handle_balance_command, Command(commands=["balance", "b"]))
    dp.message.register(handle_help_command, Command(commands=["help", "h"]))
    dp.message.register(handle_stats_command, Command(commands=["stats", "s"]))
    dp.message.register(handle_reset_command, Command(commands=["reset"]))
    dp.message.register(handle_settings_command, Command(commands=["settings", "set"]))
    dp.message.register(handle_status_command, Command(commands=["status"]))
    dp.message.register(handle_emergency_command, Command(commands=["emergency", "alert"]))
    dp.message.register(handle_export_command, Command(commands=["export"]))

    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")