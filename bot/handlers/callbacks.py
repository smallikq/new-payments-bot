from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher

from bot.ui.messages import (
    format_balance_message, format_statistics_message, format_settings_info,
    format_help_message, format_system_status, format_export_message,
    format_reset_confirmation, format_test_alert
)
from bot.ui.keyboards import (
    create_main_menu, create_settings_menu, create_emergency_settings_menu,
    create_reset_confirmation, create_back_to_main, create_time_quick_set,
    create_limits_quick_set, create_balance_limits_quick_set,
    create_alert_rate_quick_set, create_export_menu
)
from bot.states import SettingsStates
from bot.middleware.auth import is_admin
from core.database import update_setting, reset_all_data, get_statistics, get_settings_safe
from services.alerts.emergency import stop_emergency_alerts, check_emergency_conditions
from utils.logger import logger


async def handle_balance_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            format_balance_message(),
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
        await callback.answer("üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


async def handle_statistics_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            format_statistics_message(),
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


async def handle_settings_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            format_settings_info(),
            parse_mode="HTML",
            reply_markup=create_settings_menu()
        )
        await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


async def handle_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    try:
        await callback.message.edit_text(
            format_help_message(),
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer("üìñ –°–ø—Ä–∞–≤–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def handle_status_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            format_system_status(),
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer("üõ†Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


async def handle_toggle_emergency(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç—Ä–µ–≤–æ–≥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        _, _, _, _, current_state = get_settings_safe()
        new_state = not current_state

        update_setting("emergency_enabled", int(new_state))

        if not new_state:
            await stop_emergency_alerts()
            status_text = "üî¥ –¢—Ä–µ–≤–æ–≥–∞ –û–¢–ö–õ–Æ–ß–ï–ù–ê"
        else:
            status_text = "üü¢ –¢—Ä–µ–≤–æ–≥–∞ –í–ö–õ–Æ–ß–ï–ù–ê"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è
            await check_emergency_conditions()

        await callback.message.edit_text(
            f"üö® <b>–°–ò–°–¢–ï–ú–ê –¢–†–ï–í–û–ì</b>\n\n{status_text}\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer(status_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", show_alert=True)


async def handle_reset_confirm_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            format_reset_confirmation(),
            parse_mode="HTML",
            reply_markup=create_reset_confirmation()
        )
        await callback.answer("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def handle_confirm_reset(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        reset_all_data()
        await stop_emergency_alerts()

        await callback.message.edit_text(
            "‚úÖ <b>–°–ë–†–û–° –í–´–ü–û–õ–ù–ï–ù</b>\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã:\n"
            "‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞\n"
            "‚Ä¢ –¢—Ä–µ–≤–æ–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.",
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer("üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")
        logger.info("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞", show_alert=True)


async def handle_back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        welcome_text = f"ü§ñ <b>Payments Bot</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!"

        await callback.message.edit_text(
            welcome_text,
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
        await callback.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ===

async def handle_set_time_callback(callback: CallbackQuery):
    """–ú–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        current_time, _, _, _, _ = get_settings_safe()
        current_text = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>{current_time or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}</code>"

        await callback.message.edit_text(
            f"‚è∞ <b>–í–†–ï–ú–Ø –ê–í–¢–û–°–ë–†–û–°–ê</b>\n\n{current_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
            parse_mode="HTML",
            reply_markup=create_time_quick_set()
        )
        await callback.answer("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def handle_quick_time(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        time_value = callback.data.split("_")[-1]  # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
        update_setting("auto_reset_time", time_value)

        await callback.message.edit_text(
            f"‚úÖ <b>–í–†–ï–ú–Ø –û–ë–ù–û–í–õ–ï–ù–û</b>\n\n‚è∞ –ê–≤—Ç–æ—Å–±—Ä–æ—Å: <code>{time_value}</code>\n\n–í—Ä–µ–º—è –ø–æ –ö–∏–µ–≤—É",
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer(f"‚è∞ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_value}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", show_alert=True)


async def handle_manual_time_input(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(SettingsStates.waiting_for_time)
    await callback.message.edit_text(
        "‚è∞ <b>–í–í–û–î –í–†–ï–ú–ï–ù–ò</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>06:00</code>, <code>18:30</code>, <code>23:59</code>\n\n"
        "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ö–∏–µ–≤—É.",
        parse_mode="HTML",
        reply_markup=create_back_to_main()
    )
    await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è")


# === Emergency settings ===

async def handle_emergency_settings(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–≤–æ–≥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        _, critical_checks, critical_balance, _, emergency_enabled = get_settings_safe()
        status = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if emergency_enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"

        await callback.message.edit_text(
            f"üö® <b>–ù–ê–°–¢–†–û–ô–ö–ò –¢–†–ï–í–û–ì</b>\n\n"
            f"–°–∏—Å—Ç–µ–º–∞: {status}\n"
            f"–õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–æ–≤: <code>{critical_checks}</code>\n"
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: <code>{critical_balance:.2f} ‚Ç¥</code>",
            parse_mode="HTML",
            reply_markup=create_emergency_settings_menu()
        )
        await callback.answer("üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–≤–æ–≥")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–≤–æ–≥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def handle_test_alerts(callback: CallbackQuery):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        from core.config import ALERT_CHAT_IDS
        from services.alerts.emergency import bot

        if bot:
            test_message = format_test_alert()
            for chat_id in ALERT_CHAT_IDS:
                try:
                    await bot.send_message(chat_id, test_message, parse_mode="HTML")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –≤ —á–∞—Ç {chat_id}: {e}")

        await callback.answer("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞", show_alert=True)


# === Export menu ===

async def handle_export_data(callback: CallbackQuery):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            "üìã <b>–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            parse_mode="HTML",
            reply_markup=create_export_menu()
        )
        await callback.answer("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


def setup_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ callback handlers"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    dp.callback_query.register(handle_balance_callback, lambda c: c.data == "balance")
    dp.callback_query.register(handle_statistics_callback, lambda c: c.data == "stats")
    dp.callback_query.register(handle_settings_callback, lambda c: c.data == "settings")
    dp.callback_query.register(handle_help_callback, lambda c: c.data == "help")
    dp.callback_query.register(handle_status_callback, lambda c: c.data == "status")
    dp.callback_query.register(handle_back_to_main, lambda c: c.data == "back_to_main")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
    dp.callback_query.register(handle_toggle_emergency, lambda c: c.data == "toggle_emergency")
    dp.callback_query.register(handle_reset_confirm_callback, lambda c: c.data == "reset_confirm")
    dp.callback_query.register(handle_confirm_reset, lambda c: c.data == "confirm_reset")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    dp.callback_query.register(handle_set_time_callback, lambda c: c.data == "set_time")
    dp.callback_query.register(handle_quick_time, lambda c: c.data.startswith("quick_time_"))
    dp.callback_query.register(handle_manual_time_input, lambda c: c.data == "manual_time_input")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–≤–æ–≥
    dp.callback_query.register(handle_emergency_settings, lambda c: c.data == "emergency_settings")
    dp.callback_query.register(handle_test_alerts, lambda c: c.data == "test_alerts")

    # –≠–∫—Å–ø–æ—Ä—Ç
    dp.callback_query.register(handle_export_data, lambda c: c.data == "export_data")

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö callbacks
    dp.callback_query.register(lambda c: c.answer(), lambda c: c.data == "noop")