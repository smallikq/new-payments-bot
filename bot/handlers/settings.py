from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher
import re

from bot.states import SettingsStates
from bot.ui.keyboards import create_main_menu, create_back_to_main
from core.database import update_setting, get_statistics
from bot.middleware.auth import is_admin
from utils.logger import logger


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ===

async def handle_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞"""
    if not is_admin(message.from_user.id):
        return

    time_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', time_text):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>–ß–ß:–ú–ú</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>06:00</code>, <code>18:30</code>, <code>23:59</code>",
            parse_mode="HTML"
        )
        return

    try:
        update_setting("auto_reset_time", time_text)
        await state.clear()

        await message.answer(
            f"‚úÖ <b>–í–†–ï–ú–Ø –£–°–¢–ê–ù–û–í–õ–ï–ù–û</b>\n\n"
            f"‚è∞ –ê–≤—Ç–æ—Å–±—Ä–æ—Å: <code>{time_text}</code> (–ö–∏–µ–≤)\n\n"
            f"–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
        logger.info(f"–í—Ä–µ–º—è –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )


async def handle_checks_limit_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –≤—ã–≤–æ–¥–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        limit = int(message.text.strip())

        if limit < 1 or limit > 100:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>\n\n"
                "–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –≤—ã–≤–æ–¥–æ–≤.",
                parse_mode="HTML"
            )
            return

        update_setting("critical_checks_count", limit)
        await state.clear()

        await message.answer(
            f"‚úÖ <b>–õ–ò–ú–ò–¢ –û–ë–ù–û–í–õ–ï–ù</b>\n\n"
            f"üìã –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤: <code>{limit}</code>\n\n"
            f"–¢—Ä–µ–≤–æ–≥–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ {limit} –≤—ã–≤–æ–¥–∞—Ö –ø–æ–¥—Ä—è–¥ –±–µ–∑ —á–µ–∫–æ–≤.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
        logger.info(f"–õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}")

    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –≤—ã–≤–æ–¥–æ–≤: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )


async def handle_balance_limit_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        balance = float(message.text.strip().replace(',', '.'))

        if balance > 0:
            await message.answer(
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                "–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞. "
                "–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1000).\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                parse_mode="HTML"
            )
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        update_setting("critical_balance_amount", balance)
        await state.clear()

        symbol = "+" if balance >= 0 else ""
        await message.answer(
            f"‚úÖ <b>–ë–ê–õ–ê–ù–° –û–ë–ù–û–í–õ–ï–ù</b>\n\n"
            f"üí∏ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: <code>{symbol}{balance:.2f} ‚Ç¥</code>\n\n"
            f"–¢—Ä–µ–≤–æ–≥–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
        logger.info(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {balance}")

    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1000, -500.50, 0).",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )


async def handle_alert_rate_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(message.from_user.id):
        return

    try:
        rate = int(message.text.strip())

        if rate < 1 or rate > 60:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>\n\n"
                "–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É.",
                parse_mode="HTML"
            )
            return

        update_setting("alert_messages_per_minute", rate)
        await state.clear()

        interval = 60 / rate
        await message.answer(
            f"‚úÖ <b>–ß–ê–°–¢–û–¢–ê –û–ë–ù–û–í–õ–ï–ù–ê</b>\n\n"
            f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{rate}</code> –≤ –º–∏–Ω—É—Ç—É\n"
            f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{interval:.1f}</code> —Å–µ–∫—É–Ω–¥\n\n"
            f"–¢—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
        logger.info(f"–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {rate}/–º–∏–Ω")

    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )


# === Callback handlers –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===

async def handle_quick_limits(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        limit = int(callback.data.split("_")[-1])
        update_setting("critical_checks_count", limit)

        await callback.message.edit_text(
            f"‚úÖ <b>–õ–ò–ú–ò–¢ –£–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n"
            f"üìã –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤: <code>{limit}</code>",
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer(f"üìã –õ–∏–º–∏—Ç: {limit} –≤—ã–≤–æ–¥–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", show_alert=True)


async def handle_quick_balance(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        balance = float(callback.data.split("_")[-1])
        update_setting("critical_balance_amount", balance)

        await callback.message.edit_text(
            f"‚úÖ <b>–ë–ê–õ–ê–ù–° –£–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n"
            f"üí∏ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: <code>{balance:.0f} ‚Ç¥</code>",
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer(f"üí∏ –ë–∞–ª–∞–Ω—Å: {balance:.0f} ‚Ç¥")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", show_alert=True)


async def handle_quick_rate(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        rate = int(callback.data.split("_")[-1])
        update_setting("alert_messages_per_minute", rate)

        interval = 60 / rate
        await callback.message.edit_text(
            f"‚úÖ <b>–ß–ê–°–¢–û–¢–ê –£–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>\n\n"
            f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{rate}</code>/–º–∏–Ω\n"
            f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{interval:.1f}</code> —Å–µ–∫",
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer(f"üì¢ –ß–∞—Å—Ç–æ—Ç–∞: {rate}/–º–∏–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", show_alert=True)


# === Handlers –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ===

async def handle_manual_limits_input(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –ª–∏–º–∏—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(SettingsStates.waiting_for_checks_limit)
    await callback.message.edit_text(
        "üìã <b>–õ–ò–ú–ò–¢ –í–´–í–û–î–û–í</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–¥—Ä—è–¥ –±–µ–∑ —á–µ–∫–æ–≤.\n\n"
        "–î–∏–∞–ø–∞–∑–æ–Ω: <code>1-100</code>\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: <code>3-10</code>",
        parse_mode="HTML",
        reply_markup=create_back_to_main()
    )
    await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –≤—ã–≤–æ–¥–æ–≤")


async def handle_manual_balance_input(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(SettingsStates.waiting_for_balance_limit)
    await callback.message.edit_text(
        "üí∏ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–°</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–≤–æ–≥–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>-1000</code> - —Ç—Ä–µ–≤–æ–≥–∞ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ ‚â• -1000‚Ç¥\n"
        "‚Ä¢ <code>0</code> - —Ç—Ä–µ–≤–æ–≥–∞ –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ\n"
        "‚Ä¢ <code>5000</code> - —Ç—Ä–µ–≤–æ–≥–∞ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ ‚â• 5000‚Ç¥",
        parse_mode="HTML",
        reply_markup=create_back_to_main()
    )
    await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å")


async def handle_manual_rate_input(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É —á–∞—Å—Ç–æ—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(SettingsStates.waiting_for_alert_rate)
    await callback.message.edit_text(
        "üì¢ <b>–ß–ê–°–¢–û–¢–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ.\n\n"
        "–î–∏–∞–ø–∞–∑–æ–Ω: <code>1-60</code>\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: <code>3-10</code>\n\n"
        "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–ø–∞–º—É!",
        parse_mode="HTML",
        reply_markup=create_back_to_main()
    )
    await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ===

async def handle_export_stats(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        stats = get_statistics()

        export_data = f"""–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
{'=' * 40}
–ë–∞–ª–∞–Ω—Å: {stats['balance']:.2f} ‚Ç¥
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['income_count']} –Ω–∞ {stats['incoming']:.2f} ‚Ç¥
–†–∞—Å—Ö–æ–¥–æ–≤: {stats['check_count']} –Ω–∞ {stats['checks']:.2f} ‚Ç¥
–í—ã–≤–æ–¥–æ–≤: {stats['withdrawal_count']}
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {stats['max_balance']:.2f} ‚Ç¥
–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_check']:.2f} ‚Ç¥
–ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –≤—ã–≤–æ–¥–æ–≤: {stats['withdrawals_without_check']}

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats['checks'] / max(stats['incoming'], 1) * 100):.1f}%
"""

        from bot.ui.messages import format_export_message
        message_text = format_export_message('stats', export_data)

        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=create_back_to_main()
        )
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)


def setup_settings_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ handlers –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    # FSM text handlers
    dp.message.register(handle_time_input, SettingsStates.waiting_for_time)
    dp.message.register(handle_checks_limit_input, SettingsStates.waiting_for_checks_limit)
    dp.message.register(handle_balance_limit_input, SettingsStates.waiting_for_balance_limit)
    dp.message.register(handle_alert_rate_input, SettingsStates.waiting_for_alert_rate)

    # Quick setting callbacks
    dp.callback_query.register(handle_quick_limits, lambda c: c.data.startswith("quick_limit_"))
    dp.callback_query.register(handle_quick_balance, lambda c: c.data.startswith("quick_balance_"))
    dp.callback_query.register(handle_quick_rate, lambda c: c.data.startswith("quick_rate_"))

    # Manual input callbacks
    dp.callback_query.register(handle_manual_limits_input, lambda c: c.data == "manual_limit_input")
    dp.callback_query.register(handle_manual_balance_input, lambda c: c.data == "manual_balance_input")
    dp.callback_query.register(handle_manual_rate_input, lambda c: c.data == "manual_rate_input")

    # Alert rate settings
    dp.callback_query.register(
        lambda c, s=None: callback_with_quick_rate_menu(c),
        lambda c: c.data == "set_alert_rate"
    )

    # Export handlers
    dp.callback_query.register(handle_export_stats, lambda c: c.data == "export_stats")


async def callback_with_quick_rate_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        from core.database import get_settings_safe
        _, _, _, current_rate, _ = get_settings_safe()

        await callback.message.edit_text(
            f"üì¢ <b>–ß–ê–°–¢–û–¢–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: <code>{current_rate}</code> —Å–æ–æ–±—â./–º–∏–Ω\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
            parse_mode="HTML",
            reply_markup=create_alert_rate_quick_set()
        )
        await callback.answer("üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —á–∞—Å—Ç–æ—Ç—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from bot.ui.keyboards import create_alert_rate_quick_set