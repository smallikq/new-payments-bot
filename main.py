import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from core.config import API_TOKEN
from core.database import init_database
from services.alerts.scheduler import schedule_auto_reset
from services.alerts import emergency
from userbot.client import init_userbot

from bot.handlers.commands import setup_command_handlers
from bot.handlers.callbacks import setup_callback_handlers
from bot.handlers.messages import handle_private_text_message
from bot.handlers.media import setup_media_handlers
from bot.handlers.settings import setup_settings_handlers
from bot.middleware.auth import is_admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ],
)
logger = logging.getLogger("payments-bot")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Payments Bot v2.0...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_database()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram-–±–æ—Ç–∞
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        bot = Bot(token=API_TOKEN, parse_mode="HTML")
        dp = Dispatcher(storage=MemoryStorage())

        # –ü–µ—Ä–µ–¥–∞—ë–º bot –≤ emergency –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        emergency.bot = bot

        # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===

        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

        # –ö–æ–º–∞–Ω–¥—ã
        setup_command_handlers(dp)

        # Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã (–∫–Ω–æ–ø–∫–∏)
        setup_callback_handlers(dp)

        # Settings —Ö–µ–Ω–¥–ª–µ—Ä—ã (FSM)
        setup_settings_handlers(dp)

        # Media —Ö–µ–Ω–¥–ª–µ—Ä—ã (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏ —Ç.–¥.)
        setup_media_handlers(dp)

        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã)
        dp.message.register(
            handle_private_text_message,
            lambda m: (
                    m.chat.type == "private" and
                    is_admin(m.from_user.id) and
                    m.text and
                    not m.text.startswith('/') and
                    not m.photo and
                    not m.document and
                    not m.voice and
                    not m.video and
                    not m.sticker
            )
        )

        # === –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===

        # –ó–∞–ø—É—Å–∫ userbot
        logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot...")
        try:
            userbot = await init_userbot()
            if userbot:
                asyncio.create_task(userbot.run_until_disconnected())
                logger.info("‚úÖ Userbot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è Userbot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API_ID/API_HASH)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot: {e}")

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞
        logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞...")
        try:
            asyncio.create_task(schedule_auto_reset())
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        logger.info("üì° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot, skip_updates=True)

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)