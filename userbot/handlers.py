from telethon import events, TelegramClient
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from core.config import TOP_UP_CHAT_ID, CHECKS_CHAT_ID, ALLOWED_CHATS
from core.database import add_income, add_withdrawal, add_check, save_check_screenshot
from services.banking.parser import extract_bank_payment
from services.ocr.processor import process_check_image_telethon
from utils.logger import logger
import asyncio


def setup_userbot_handlers(client: TelegramClient):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è userbot"""

    @client.on(events.NewMessage(chats=ALLOWED_CHATS))
    async def handle_userbot_message(event):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π userbot"""
        chat_id = event.chat_id
        message_text = event.raw_text or ""

        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if chat_id == TOP_UP_CHAT_ID:
                logger.debug(f"üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {message_text[:50]}...")
                await handle_income_message(event, message_text, client)

            elif chat_id == CHECKS_CHAT_ID:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                is_photo = event.photo is not None
                is_image_doc = (event.document and
                                hasattr(event.document, 'mime_type') and
                                event.document.mime_type and
                                event.document.mime_type.startswith('image/'))

                if not (is_photo or is_image_doc):
                    logger.debug(f"üìù –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —á–µ–∫–æ–≤ (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ): {message_text[:50]}...")
                    return

                logger.debug("üñºÔ∏è –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —á–µ–∫–æ–≤")
                await handle_check_message(event, message_text, client)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è userbot: {e}")

    @client.on(events.MessageEdited(chats=ALLOWED_CHATS))
    async def handle_edited_message(event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = event.chat_id
            message_text = event.raw_text or ""

            if chat_id == TOP_UP_CHAT_ID:
                logger.info(f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
                # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await handle_income_message(event, message_text, client)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    @client.on(events.MessageDeleted(chats=ALLOWED_CHATS))
    async def handle_deleted_message(event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º —á–∞—Ç–µ")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ userbot –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


async def handle_income_message(event, message_text: str, client: TelegramClient):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
        amount = extract_bank_payment(message_text)

        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if amount is None and (event.photo or event.document):
            logger.info("üîç –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º—ã, –ø—Ä–æ–±—É–µ–º OCR...")

            try:
                ocr_amount, full_text = await process_check_image_telethon(client, event.message)

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É–º–º—É –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                if full_text:
                    amount = extract_bank_payment(full_text)

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ OCR
                if amount is None:
                    amount = ocr_amount

                if amount:
                    logger.info(f"‚úÖ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å—É–º–º—É: {amount:.2f} UAH")

            except Exception as ocr_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR: {ocr_error}")

        if amount is None:
            logger.debug(f"‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
        if amount > 0:
            add_income(amount)
            logger.info(f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {amount:.2f} UAH")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è—Ö
            if amount >= 1000:
                await notify_admin_about_large_transaction(client, "income", amount)

        elif amount < 0:
            add_withdrawal(amount)
            logger.info(f"üí∏ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤—ã–≤–æ–¥: {amount:.2f} UAH")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä—É–ø–Ω—ã—Ö –≤—ã–≤–æ–¥–∞—Ö
            if abs(amount) >= 500:
                await notify_admin_about_large_transaction(client, "withdrawal", amount)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


async def handle_check_message(event, message_text: str, client: TelegramClient):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —á–µ–∫–∞–º–∏"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logger.info("üîç –ó–∞–ø—É—Å–∫ OCR –¥–ª—è —á–µ–∫–∞...")
        amount, full_text = await process_check_image_telethon(client, event.message)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
        file_id = str(event.message.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—É–º–º—ã
        if amount and 1 <= amount <= 50000:
            add_check(amount)
            save_check_screenshot(file_id, amount, full_text or "")
            logger.info(f"üßæ –î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫: {amount:.2f} UAH (ID: {file_id})")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
            try:
                await event.message.reply(f"‚úÖ –ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {amount:.2f} UAH")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —á–µ–∫
            save_check_screenshot(file_id, 0, full_text or "OCR failed")
            logger.warning(f"‚ö†Ô∏è –ß–µ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {amount}")

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç–µ
            if full_text:
                text_amount = extract_bank_payment(full_text)
                if text_amount and text_amount > 0:
                    add_check(text_amount)
                    save_check_screenshot(file_id, text_amount, full_text)
                    logger.info(f"üßæ –°—É–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {text_amount:.2f} UAH")

                    try:
                        await event.message.reply(f"‚úÖ –°—É–º–º–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text_amount:.2f} UAH")
                    except:
                        pass

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await event.message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)[:100]}")
        except:
            pass


async def notify_admin_about_large_transaction(client: TelegramClient, transaction_type: str, amount: float):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"""
    try:
        from core.config import ADMIN_CHAT_ID
        from core.database import get_balance

        incoming, checks, _ = get_balance()
        balance = incoming - checks

        if transaction_type == "income":
            emoji = "üí∞"
            action = "–ö—Ä—É–ø–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
            color = "üü¢"
        else:
            emoji = "üí∏"
            action = "–ö—Ä—É–ø–Ω—ã–π –≤—ã–≤–æ–¥"
            color = "üî¥"
            amount = abs(amount)

        message = f"""
{color} <b>{action}!</b>

{emoji} –°—É–º–º–∞: <code>{amount:,.2f} UAH</code>
üíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{balance:,.2f} UAH</code>

<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</i>
"""

        await client.send_message(ADMIN_CHAT_ID, message, parse_mode='html')

    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


async def periodic_stats_report(client: TelegramClient):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π)"""
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
            await asyncio.sleep(3600)  # 1 —á–∞—Å

            from core.database import get_statistics
            from core.config import ADMIN_CHAT_ID
            from datetime import datetime
            import pytz

            stats = get_statistics()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if stats['income_count'] > 0 or stats['check_count'] > 0:
                time_now = datetime.now(pytz.timezone('Europe/Kiev')).strftime('%H:%M')

                message = f"""
üìä <b>–ß–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç ({time_now})</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <code>{stats['balance']:,.2f} UAH</code>
üìà –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['income_count']} –Ω–∞ {stats['incoming']:,.2f} UAH
üìâ –ß–µ–∫–æ–≤: {stats['check_count']} –Ω–∞ {stats['checks']:,.2f} UAH

<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</i>
"""

                await client.send_message(ADMIN_CHAT_ID, message, parse_mode='html')

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")