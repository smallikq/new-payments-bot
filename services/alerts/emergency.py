import asyncio
from core.config import ALERT_CHAT_IDS
from core.database import get_balance, withdrawals_without_check
from utils.logger import logger
from aiogram import Bot
from core.database import get_settings_safe

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–≤–æ–≥
emergency_task = None
bot: Bot | None = None  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ main.py


async def check_emergency_conditions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–≤–æ–≥–∏"""
    _, critical_withdrawals, critical_balance, alert_rate, emergency_enabled = get_settings_safe()
    incoming, checks, _ = get_balance()
    balance = incoming - checks

    if not emergency_enabled:
        await stop_emergency_alerts()
        return

    triggered = False
    if withdrawals_without_check >= critical_withdrawals:
        triggered = True
        logger.warning(f"–¢—Ä–µ–≤–æ–≥–∞: –≤—ã–≤–æ–¥–æ–≤ –ø–æ–¥—Ä—è–¥ {withdrawals_without_check} >= {critical_withdrawals}")

    if balance >= critical_balance:
        triggered = True
        logger.warning(f"–¢—Ä–µ–≤–æ–≥–∞: –±–∞–ª–∞–Ω—Å {balance:.2f} >= {critical_balance:.2f}")

    if triggered:
        await start_emergency_alerts(alert_rate)
    else:
        await stop_emergency_alerts()


async def start_emergency_alerts(messages_per_minute: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global emergency_task
    if emergency_task and not emergency_task.done():
        emergency_task.cancel()
    emergency_task = asyncio.create_task(send_emergency_alerts(messages_per_minute))


async def send_emergency_alerts(messages_per_minute: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        interval = 60 / max(1, int(messages_per_minute))
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–≤–æ–≥ (–∏–Ω—Ç–µ—Ä–≤–∞–ª {interval:.1f} —Å–µ–∫)")

        while True:
            try:
                message_text = (
                    "üö® <b>@trn_a –°–¢–û–ü–ê–ô –¢–†–ê–§–ò–ö!</b> üö®\n\n"
                    "‚õîÔ∏è <b>(–ø–æ–∫–∞ –ê–ª–µ–∫—Å–µ–π –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å)</b> ‚õîÔ∏è\n\n"
                )
                if bot:
                    for chat_id in ALERT_CHAT_IDS:
                        await bot.send_message(chat_id, message_text, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç—Ä–µ–≤–æ–≥: {e}")
            await asyncio.sleep(interval)

    except asyncio.CancelledError:
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–≤–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def stop_emergency_alerts():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É"""
    global emergency_task
    if emergency_task and not emergency_task.done():
        emergency_task.cancel()
        emergency_task = None
        logger.info("–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–≤–æ–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
