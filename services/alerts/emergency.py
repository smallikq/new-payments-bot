import asyncio
from datetime import datetime
import pytz
from typing import Optional

from core.config import ALERT_CHAT_IDS
from core.database import get_balance, withdrawals_without_check, get_settings_safe
from utils.logger import logger
from aiogram import Bot

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
emergency_task: Optional[asyncio.Task] = None
bot: Optional[Bot] = None  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑ main.py
last_alert_time: Optional[datetime] = None
alert_count = 0


async def check_emergency_conditions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥"""
    try:
        _, critical_withdrawals, critical_balance, alert_rate, emergency_enabled = get_settings_safe()

        if not emergency_enabled:
            await stop_emergency_alerts()
            return

        incoming, checks, _ = get_balance()
        current_balance = incoming - checks

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        withdrawal_trigger = withdrawals_without_check >= critical_withdrawals
        balance_trigger = current_balance >= critical_balance

        triggered = withdrawal_trigger or balance_trigger

        if triggered:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É —Ç—Ä–µ–≤–æ–≥–∏
            reasons = []
            if withdrawal_trigger:
                reasons.append(f"–≤—ã–≤–æ–¥–æ–≤ –ø–æ–¥—Ä—è–¥: {withdrawals_without_check} ‚â• {critical_withdrawals}")
            if balance_trigger:
                reasons.append(f"–±–∞–ª–∞–Ω—Å: {current_balance:.2f} ‚â• {critical_balance:.2f}")

            logger.warning(f"üö® –¢—Ä–µ–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–∏—á–∏–Ω—ã: {'; '.join(reasons)}")
            await start_emergency_alerts(alert_rate, reasons)
        else:
            await stop_emergency_alerts()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Ç—Ä–µ–≤–æ–≥–∏: {e}")


async def start_emergency_alerts(messages_per_minute: int, reasons: list):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global emergency_task, alert_count

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if emergency_task and not emergency_task.done():
        emergency_task.cancel()
        try:
            await emergency_task
        except asyncio.CancelledError:
            pass

    alert_count = 0
    emergency_task = asyncio.create_task(send_emergency_alerts(messages_per_minute, reasons))


async def send_emergency_alerts(messages_per_minute: int, reasons: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π"""
    global last_alert_time, alert_count

    try:
        interval = 60.0 / max(1, int(messages_per_minute))
        logger.info(f"üö® –ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–≤–æ–≥ (–∏–Ω—Ç–µ—Ä–≤–∞–ª {interval:.1f} —Å–µ–∫)")

        while True:
            try:
                if bot:
                    alert_count += 1
                    last_alert_time = datetime.now(pytz.timezone("Europe/Kiev"))

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    incoming, checks, _ = get_balance()
                    current_balance = incoming - checks

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏
                    message_text = create_alert_message(current_balance, reasons, alert_count)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã —Ç—Ä–µ–≤–æ–≥
                    for chat_id in ALERT_CHAT_IDS:
                        try:
                            await bot.send_message(chat_id, message_text, parse_mode="HTML")
                            logger.debug(f"üì§ –¢—Ä–µ–≤–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                else:
                    logger.warning("‚ö†Ô∏è Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–≤–æ–≥")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç—Ä–µ–≤–æ–≥: {e}")

            await asyncio.sleep(interval)

    except asyncio.CancelledError:
        logger.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–≤–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç—Ä–µ–≤–æ–≥: {e}")


def create_alert_message(balance: float, reasons: list, count: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    if balance < -5000:
        urgency_emoji = "üíÄ"
        urgency_text = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø"
    elif balance < -2000:
        urgency_emoji = "üî¥"
        urgency_text = "–í–´–°–û–ö–ê–Ø"
    elif balance < -500:
        urgency_emoji = "‚ö†Ô∏è"
        urgency_text = "–°–†–ï–î–ù–Ø–Ø"
    else:
        urgency_emoji = "üö®"
        urgency_text = "–ù–ò–ó–ö–ê–Ø"

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    timestamp = datetime.now(pytz.timezone("Europe/Kiev")).strftime('%H:%M:%S')

    message = f"""
{urgency_emoji} <b>–¢–†–ï–í–û–ì–ê! –û–°–¢–ê–ù–û–í–ò–¢–ï –¢–†–ê–§–ò–ö!</b> {urgency_emoji}

‚õî <b>@trn_a –°–†–û–ß–ù–û –ü–†–û–í–ï–†–¨–¢–ï –°–ò–¢–£–ê–¶–ò–Æ!</b>
üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: <b>{urgency_text}</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance:,.2f} ‚Ç¥</code>
üìä –í—ã–≤–æ–¥–æ–≤ –±–µ–∑ —á–µ–∫–æ–≤: <code>{withdrawals_without_check}</code>

üîç <b>–ü—Ä–∏—á–∏–Ω—ã —Ç—Ä–µ–≤–æ–≥–∏:</b>
"""

    for i, reason in enumerate(reasons, 1):
        message += f"‚îî {reason}\n"

    message += f"""
üïê –í—Ä–µ–º—è: <code>{timestamp}</code> (–ö–∏–µ–≤)
üî¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: <code>#{count}</code>

‚ö° <b>–¢–†–ï–ë–£–Æ–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø!</b>
"""

    return message


async def stop_emergency_alerts():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç—Ä–µ–≤–æ–≥"""
    global emergency_task, alert_count, last_alert_time

    if emergency_task and not emergency_task.done():
        emergency_task.cancel()
        try:
            await emergency_task
        except asyncio.CancelledError:
            pass

        emergency_task = None
        final_count = alert_count
        alert_count = 0
        last_alert_time = None

        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–≤–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {final_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)")


async def send_test_alert():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    if not bot:
        logger.warning("‚ö†Ô∏è Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∞")
        return False

    test_message = f"""
üß™ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
üïê –í—Ä–µ–º—è: <code>{datetime.now(pytz.timezone('Europe/Kiev')).strftime('%H:%M:%S')}</code>
üì° –°—Ç–∞—Ç—É—Å: –í—Å–µ —á–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–≤–æ–≥.</i>
"""

    success_count = 0
    for chat_id in ALERT_CHAT_IDS:
        try:
            await bot.send_message(chat_id, test_message, parse_mode="HTML")
            success_count += 1
            logger.info(f"‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞ –≤ —á–∞—Ç {chat_id}: {e}")

    logger.info(f"üß™ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(ALERT_CHAT_IDS)} —á–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
    return success_count > 0


def get_emergency_status() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥"""
    global emergency_task, alert_count, last_alert_time

    is_active = emergency_task and not emergency_task.done()

    return {
        'active': is_active,
        'enabled': get_settings_safe()[4],  # emergency_enabled
        'alert_count': alert_count,
        'last_alert': last_alert_time.isoformat() if last_alert_time else None,
        'task_status': 'running' if is_active else 'stopped'
    }


async def force_stop_all_alerts():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–≤–æ–≥–∏ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
    global emergency_task, alert_count, last_alert_time

    try:
        if emergency_task:
            emergency_task.cancel()
            try:
                await emergency_task
            except asyncio.CancelledError:
                pass
            emergency_task = None

        alert_count = 0
        last_alert_time = None

        logger.warning("üõë –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –¢–†–ï–í–û–ì")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if bot:
            stop_message = f"""
üõë <b>–°–ò–°–¢–ï–ú–ê –¢–†–ï–í–û–ì –û–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>

‚èπÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
üïê –í—Ä–µ–º—è: <code>{datetime.now(pytz.timezone('Europe/Kiev')).strftime('%H:%M:%S')}</code>
üë§ –ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

<i>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.</i>
"""

            for chat_id in ALERT_CHAT_IDS:
                try:
                    await bot.send_message(chat_id, stop_message, parse_mode="HTML")
                except:
                    pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False