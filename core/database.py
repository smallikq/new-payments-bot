import sqlite3
import asyncio
import pytz
from datetime import datetime
from typing import Tuple, Optional
from core.config import DATABASE_PATH
from utils.logger import logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
withdrawals_without_check = 0
last_income_time = None


def init_database():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute("""
                       CREATE TABLE IF NOT EXISTS transaction_history
                       (
                           id
                           INTEGER
                           PRIMARY
                           KEY
                           AUTOINCREMENT,
                           type
                           TEXT
                           NOT
                           NULL
                           CHECK (
                           type
                           IN
                       (
                           'income',
                           'withdrawal',
                           'check'
                       )),
                           amount REAL NOT NULL,
                           description TEXT DEFAULT '',
                           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                           )
                       """)

        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤
        cursor.execute("""
                       CREATE TABLE IF NOT EXISTS totals
                       (
                           id
                           INTEGER
                           PRIMARY
                           KEY
                           CHECK
                       (
                           id =
                           1
                       ),
                           incoming REAL DEFAULT 0 CHECK
                       (
                           incoming
                           >=
                           0
                       ),
                           checks REAL DEFAULT 0 CHECK
                       (
                           checks
                           >=
                           0
                       ),
                           max_balance REAL DEFAULT 0
                           )
                       """)

        # –¢–∞–±–ª–∏—Ü–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —á–µ–∫–æ–≤
        cursor.execute("""
                       CREATE TABLE IF NOT EXISTS screenshots
                       (
                           id
                           INTEGER
                           PRIMARY
                           KEY
                           AUTOINCREMENT,
                           file_id
                           TEXT
                           NOT
                           NULL,
                           amount
                           REAL
                           DEFAULT
                           0,
                           raw_text
                           TEXT
                           DEFAULT
                           '',
                           created_at
                           TIMESTAMP
                           DEFAULT
                           CURRENT_TIMESTAMP
                       )
                       """)

        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute("""
                       CREATE TABLE IF NOT EXISTS settings
                       (
                           id
                           INTEGER
                           PRIMARY
                           KEY
                           CHECK
                       (
                           id =
                           1
                       ),
                           auto_reset_time TEXT DEFAULT NULL,
                           critical_checks_count INTEGER DEFAULT 5 CHECK
                       (
                           critical_checks_count >
                           0
                       ),
                           critical_balance_amount REAL DEFAULT -1000.0,
                           alert_messages_per_minute INTEGER DEFAULT 5 CHECK
                       (
                           alert_messages_per_minute >
                           0
                       ),
                           emergency_enabled INTEGER DEFAULT 1 CHECK
                       (
                           emergency_enabled
                           IN
                       (
                           0,
                           1
                       ))
                           )
                       """)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute("INSERT OR IGNORE INTO totals (id, incoming, checks, max_balance) VALUES (1, 0, 0, 0)")
        cursor.execute("INSERT OR IGNORE INTO settings (id) VALUES (1)")

        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


def get_balance() -> Tuple[float, float, float]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–∞—Å—Ö–æ–¥—ã, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT incoming, checks, max_balance FROM totals WHERE id=1")
        row = cursor.fetchone()
        conn.close()
        return row if row else (0.0, 0.0, 0.0)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return (0.0, 0.0, 0.0)


def get_settings_safe() -> Tuple[Optional[str], int, float, int, bool]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("""
                       SELECT auto_reset_time,
                              critical_checks_count,
                              critical_balance_amount,
                              alert_messages_per_minute,
                              emergency_enabled
                       FROM settings
                       WHERE id = 1
                       """)
        row = cursor.fetchone()
        conn.close()

        if row:
            auto_reset_time, critical_checks, critical_balance, alert_rate, emergency_enabled = row
            return auto_reset_time, critical_checks, critical_balance, alert_rate, bool(emergency_enabled)
        else:
            return None, 5, -1000.0, 5, True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return None, 5, -1000.0, 5, True


def update_setting(key: str, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î"""
    try:
        valid_keys = {
            'auto_reset_time': 'TEXT',
            'critical_checks_count': 'INTEGER',
            'critical_balance_amount': 'REAL',
            'alert_messages_per_minute': 'INTEGER',
            'emergency_enabled': 'INTEGER'
        }

        if key not in valid_keys:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {key}")
            return False

        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute(f"UPDATE settings SET {key} = ? WHERE id=1", (value,))
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {key} = {value}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        return False


def update_max_balance():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–æ–ª—å—à–µ"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT incoming, checks, max_balance FROM totals WHERE id=1")
        row = cursor.fetchone()

        if not row:
            conn.close()
            return

        incoming, checks, max_balance = row
        current_balance = incoming - checks

        if current_balance > max_balance:
            cursor.execute("UPDATE totals SET max_balance=? WHERE id=1", (current_balance,))
            conn.commit()
            logger.info(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} UAH")

        conn.close()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")


def add_income(amount: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    global last_income_time

    if amount <= 0:
        logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}")
        return

    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("UPDATE totals SET incoming = incoming + ? WHERE id=1", (amount,))
        cursor.execute("INSERT INTO transaction_history(type, amount) VALUES(?, ?)", ("income", amount))
        conn.commit()
        conn.close()

        last_income_time = datetime.now(pytz.timezone("Europe/Kiev"))
        logger.info(f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {amount:.2f} UAH")

        update_max_balance()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ç—Ä–µ–≤–æ–≥–∏
        from services.alerts.emergency import check_emergency_conditions
        asyncio.create_task(check_emergency_conditions())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


def add_withdrawal(amount: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)"""
    global withdrawals_without_check

    if amount >= 0:
        logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: {amount}")
        return

    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO transaction_history(type, amount) VALUES(?, ?)", ("withdrawal", amount))
        conn.commit()
        conn.close()

        withdrawals_without_check += 1
        logger.info(f"üí∏ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤—ã–≤–æ–¥: {amount:.2f} UAH. –ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –≤—ã–≤–æ–¥–æ–≤: {withdrawals_without_check}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ç—Ä–µ–≤–æ–≥–∏
        from services.alerts.emergency import check_emergency_conditions
        asyncio.create_task(check_emergency_conditions())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {e}")


def add_check(amount: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫ (—Ä–∞—Å—Ö–æ–¥)"""
    global withdrawals_without_check

    if amount <= 0:
        logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É —á–µ–∫–∞: {amount}")
        return

    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("UPDATE totals SET checks = checks + ? WHERE id=1", (amount,))
        cursor.execute("INSERT INTO transaction_history(type, amount) VALUES(?, ?)", ("check", amount))
        conn.commit()
        conn.close()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–¥–∏–Ω –≤—ã–≤–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ
        if withdrawals_without_check > 0:
            withdrawals_without_check -= 1

        logger.info(f"üßæ –î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫: {amount:.2f} UAH. –ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –≤—ã–≤–æ–¥–æ–≤: {withdrawals_without_check}")

        update_max_balance()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ç—Ä–µ–≤–æ–≥–∏
        from services.alerts.emergency import check_emergency_conditions
        asyncio.create_task(check_emergency_conditions())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞: {e}")


def save_check_screenshot(file_id: str, amount: float, raw_text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —á–µ–∫–∞"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO screenshots(file_id, amount, raw_text) VALUES(?, ?, ?)",
            (file_id, amount, raw_text)
        )
        conn.commit()
        conn.close()
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {file_id}, —Å—É–º–º–∞: {amount}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")


def reset_all_data():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞"""
    global withdrawals_without_check

    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        cursor.execute("UPDATE totals SET incoming=0, checks=0, max_balance=0 WHERE id=1")

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        cursor.execute("DELETE FROM transaction_history")
        cursor.execute("DELETE FROM screenshots")

        conn.commit()
        conn.close()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        withdrawals_without_check = 0

        logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")


def get_statistics() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É–º–º—ã
        cursor.execute("SELECT incoming, checks, max_balance FROM totals WHERE id=1")
        incoming, checks, max_balance = cursor.fetchone() or (0, 0, 0)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute("SELECT COUNT(*) FROM transaction_history WHERE type='income'")
        income_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM transaction_history WHERE type='check'")
        check_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM transaction_history WHERE type='withdrawal'")
        withdrawal_count = cursor.fetchone()[0]

        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        cursor.execute("SELECT AVG(amount) FROM transaction_history WHERE type='check' AND amount > 0")
        avg_check = cursor.fetchone()[0] or 0

        conn.close()

        return {
            'balance': incoming - checks,
            'incoming': incoming,
            'checks': checks,
            'max_balance': max_balance,
            'income_count': income_count,
            'check_count': check_count,
            'withdrawal_count': withdrawal_count,
            'avg_check': avg_check,
            'withdrawals_without_check': withdrawals_without_check
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'balance': 0, 'incoming': 0, 'checks': 0, 'max_balance': 0,
            'income_count': 0, 'check_count': 0, 'withdrawal_count': 0,
            'avg_check': 0, 'withdrawals_without_check': 0
        }